generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("PROD_DATABASE_URL")
  relationMode = "prisma"
}

model UserModel {
  id               String            @id @default(uuid()) @map("_id")
  username         String            @unique
  mainWallet       String            @unique
  profilePicture   String            @db.VarChar(500)
  tx               String            @db.VarChar(500)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  isActive         Boolean           @default(true)
  isArchive        Boolean           @default(false)
  userDetailsModel UserDetailsModel?
  team             Team[]
  Session          Session[]
  project          ProjectsModel[]
  Reply            Reply[]
  Comments         Comments[]
  Contribution     Contribution[]
  Round            Round[]

  @@fulltext([username])
}

model Session {
  id           String    @id @default(uuid())
  sessionToken String    @unique
  userId       String
  expires      DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         UserModel @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model UserDetailsModel {
  id             String    @id @default(uuid()) @map("_id")
  firstName      String?
  lastName       String?
  bio            String?   @db.VarChar(1000)
  email          String?
  website        String?
  twitterHandle  String?
  githubHandle   String?
  linkedinUrl    String?
  telegramHandle String?
  userModelId    String    @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  isActive       Boolean   @default(true)
  isArchive      Boolean   @default(false)
  user           UserModel @relation(fields: [userModelId], references: [id])

  @@index([userModelId])
}

model ProjectsModel {
  id                String              @id @default(uuid()) @map("_id")
  name              String
  short_description String              @db.VarChar(2000)
  logo              String              @db.VarChar(1000)
  owner_publickey   String
  sig               String              @default("")
  long_description  String              @db.Text
  industry          String
  project_link      String              @default("")
  twitter_handle    String              @default("")
  github_link       String              @default("")
  discord_link      String              @default("")
  telegram_link     String              @default("")
  projectUserCount  Int                 @default(0)
  status            ProjectVerifyStatus @default(REVIEW)
  failedReason      String?             @default("")
  mutliSigAddress   String?             @default("")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  email             String              @default("")
  isActive          Boolean             @default(true)
  isArchive         Boolean             @default(false)
  comments          Comments[]
  ProjectJoinRound  ProjectJoinRound[]
  owner             UserModel           @relation(fields: [owner_publickey], references: [mainWallet])
  Team              Team[]
  Contribution      Contribution[]

  @@index([owner_publickey])
}

model Team {
  id              String        @id @default(uuid()) @map("_id")
  userId          String
  projectsModelId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  isActive        Boolean       @default(true)
  isArchive       Boolean       @default(false)
  user            UserModel     @relation(fields: [userId], references: [id])
  ProjectsModel   ProjectsModel @relation(fields: [projectsModelId], references: [id])

  @@index([projectsModelId])
  @@index([userId])
}

model ProjectJoinRound {
  id            String                 @id @default(uuid()) @map("_id")
  projectId     String
  tx            String                 @db.VarChar(500)
  roundId       String
  status        ProjectJoinRoundStatus @default(PENDING)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  amountRaise   Float?                 @default(0)
  contributions Int                    @default(0)
  project       ProjectsModel          @relation(fields: [projectId], references: [id])
  fundingRound  Round                  @relation(fields: [roundId], references: [id])

  @@index([projectId])
  @@index([roundId])
}

model Round {
  id                String             @id @default(uuid()) @map("_id")
  roundName         String
  matchedPool       Float              @default(0)
  notionPage        String             @db.VarChar(500)
  projectCount      Int                @default(0)
  active            Boolean            @default(true)
  userId            String
  description       String             @default(dbgenerated("(_utf8mb4\\'\\')")) @db.Text
  endtime           DateTime           @default(now())
  startTime         DateTime           @default(now())
  tx                String             @db.VarChar(500)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  colorScheme       String             @default("teal")
  short_description String             @default("") @db.VarChar(2000)
  markdownDetails   String             @default(dbgenerated("(_utf8mb4\\'\\')")) @db.Text
  contributions     Float              @default(0)
  sponsor           Sponsor[]
  User              UserModel          @relation(fields: [userId], references: [id])
  ProjectJoinRound  ProjectJoinRound[]
  Contribution      Contribution[]

  @@index([userId])
}

model Sponsor {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  logo      String   @db.VarChar(500)
  roundId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Round     Round    @relation(fields: [roundId], references: [id])

  @@index([roundId])
}

model Contribution {
  id              String        @id @default(uuid()) @map("_id")
  tx              String        @db.VarChar(500)
  token           String
  split           Float
  roundId         String
  projectId       String
  userId          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  count           Int           @default(0)
  currentTotal    Float
  currentusdTotal Float
  isLatest        Boolean       @default(true)
  total           Float
  usdTotal        Float
  user            UserModel     @relation(fields: [userId], references: [id])
  ProjectsModel   ProjectsModel @relation(fields: [projectId], references: [id])
  Round           Round         @relation(fields: [roundId], references: [id])

  @@index([projectId])
  @@index([roundId])
  @@index([userId])
}

model Comments {
  id              String        @id @default(uuid()) @map("_id")
  comment         String        @db.Text
  userId          String
  projectsModelId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Reply           Reply[]
  user            UserModel     @relation(fields: [userId], references: [id])
  ProjectsModel   ProjectsModel @relation(fields: [projectsModelId], references: [id])

  @@index([userId])
  @@index([projectsModelId])
}

model Reply {
  id          String     @id @default(uuid()) @map("_id")
  reply       String     @db.Text
  commentId   String
  replyUserId String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  comment     Comments?  @relation(fields: [commentId], references: [id])
  user        UserModel? @relation(fields: [replyUserId], references: [id])

  @@index([commentId])
  @@index([replyUserId])
}

enum ProjectVerifyStatus {
  REVIEW
  VERIFIED
  FAILED
}

enum ProjectJoinRoundStatus {
  PENDING
  APPROVED
  REJECTED
}
